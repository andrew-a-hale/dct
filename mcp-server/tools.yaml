tools:
  - name: data_peek
    description: "Preview file contents - display the first few lines of a data file"
    inputSchema:
      type: object
      properties:
        file_path:
          type: string
          description: "Path to the data file (CSV, JSON, NDJSON, Parquet)"
        lines:
          type: integer
          description: "Number of lines to display (default: 10)"
          minimum: 1
        output_file:
          type: string
          description: "Optional output file path"
      required:
        - file_path

  - name: data_infer
    description: "Generate a SQL Create Table statement from a file"
    inputSchema:
      type: object
      properties:
        file_path:
          type: string
          description: "Path to the data file (CSV, JSON, NDJSON, Parquet)"
        lines:
          type: integer
          description: "Number of lines to display (default: 10)"
          minimum: 1
        output_file:
          type: string
          description: "Optional output file path"
        table:
          type: string
          description: "Table name used in create table statement (default: default)"
      required:
        - file_path

  - name: data_diff
    description: "Compare two data files with key matching and metrics"
    inputSchema:
      type: object
      properties:
        keys:
          type: string
          description: "Key specification for matching (format: left_key[=right_key])"
        file1:
          type: string
          description: "Path to the first data file"
        file2:
          type: string
          description: "Path to the second data file"
        metrics:
          type: string
          description: "JSON metrics specification (e.g., '[{\"agg\":\"count_distinct\",\"left\":\"col\",\"right\":\"col\"}]')"
        show_all:
          type: boolean
          description: "Show all metrics"
        output_file:
          type: string
          description: "Optional output file path"
      required:
        - keys
        - file1
        - file2

  - name: data_chart
    description: "Generate simple charts from data files"
    inputSchema:
      type: object
      properties:
        file_path:
          type: string
          description: "Path to the data file"
        column_index:
          type: integer
          description: "Column index to chart"
          minimum: 0
        width:
          type: integer
          description: "Width of the chart in characters"
          minimum: 10
      required:
        - file_path

  - name: data_generate
    description: "Generate synthetic data with customizable schemas"
    inputSchema:
      type: object
      properties:
        schema:
          type: string
          description: |
            JSON schema for data generation or path to schema file.
            The schema should be a JSON array of field objects, each containing:
            {"field": "column_name", "source": "source_type", "config": {...}}.
            Available sources:
              randomBool,
              randomAscii (config: {"length": int}),
              randomUniformInt (config: {"min": int, "max": int}),
              randomNormal (config: {"mean": float, "std": float}),
              randomPoisson (config: {"lambda": int}),
              randomDatetime (config: {"tz": "timezone", "min": "YYYY-MM-DD HH:MM:SS", "max": "YYYY-MM-DD HH:MM:SS"}),
              randomDate (config: {"min": "YYYY-MM-DD", "max": "YYYY-MM-DD"}),
              randomTime (config: {"min": "HH:MM:SS", "max": "HH:MM:SS"}),
              uuid,
              firstNames,
              lastNames,
              companies,
              emails,
              derived (config: {"fields": ["field1", "field2"], "expression": "field1 + ' ' + field2"}).

            Example: '[{"field":"name","source":"firstNames"},{"field":"age","source":"randomUniformInt","config":{"min":18,"max":65}}]'"
        lines:
          type: integer
          description: "Number of data rows to generate (default: 1)"
          minimum: 1
        format:
          type: string
          description: "Output format: csv or ndjson (default: csv)"
          enum:
            - csv
            - ndjson
        output_file:
          type: string
          description: "Optional output file path"
      required:
        - schema

  - name: data_flattify
    description: "Convert nested JSON structures to flat formats or SQL"
    inputSchema:
      type: object
      properties:
        input:
          type: string
          description: "JSON content or path to JSON file"
        sql:
          type: boolean
          description: "Create DuckDB-compliant SQL Select statement"
        output_file:
          type: string
          description: "Optional output file path"
      required:
        - input

  - name: data_js2sql
    description: "Convert JSON Schema to SQL CREATE TABLE statements"
    inputSchema:
      type: object
      properties:
        schema_file:
          type: string
          description: "Path to JSON schema file"
        table_name:
          type: string
          description: "Table name (default: test)"
        output_file:
          type: string
          description: "Optional output file path"
      required:
        - schema_file

  - name: data_profile
    description: "Provide detailed summaries and profiling for data files"
    inputSchema:
      type: object
      properties:
        file_path:
          type: string
          description: "Path to the data file to profile"
        output_file:
          type: string
          description: "Optional output file path"
      required:
        - file_path
